import React, { useState } from 'react';
import { Button, Card, Stack } from 'react-bootstrap';
import debug from 'sabio-debug';
import FileUploader from '../files/FileUploader';
import { FormikProvider, Form, Field, ErrorMessage, useFormik } from 'formik';
import '../../pages/account/formikerror.css';
import StoryPreview from './StoryPreview';
import shareStoryService from '../../services/shareStoryService';
import shareStorySchema from '../../schemas/shareStorySchema';
import toastr from 'toastr';
import Swal from 'sweetalert2';
import { useEffect } from 'react';
import { useLocation } from 'react-router-dom';
import { useNavigate } from 'react-router-dom';

const _logger = debug.extend('shareStory');

function ShareStoryFormEdit() {
    const [formData, setFormData] = useState({ name: '', email: '', story: '', images: [], createdBy: 0 });
    const [imageFiles, setImageFiles] = useState({ Id: '', Url: '', Name: '' });
    const { state } = useLocation();
    const navigate = useNavigate();
    _logger('State over form', state);

    const handleSubmit = (values, { resetForm }) => {
        const payload = {
            id: state.payload.id,
            name: formik.values.name,
            email: formik.values.email,
            story: formik.values.story,
            images: [imageFiles.Id],
            createdBy: 0,
        };
        _logger(payload);
        shareStoryService.EditStory(payload, payload.id).then(onSubmitSuccess).catch(onSubmitError);
        resetForm();
        setImageFiles({ Id: '', Url: '', Name: '' });
    };
    const formik = useFormik({
        initialValues: formData,
        onSubmit: handleSubmit,
        validationSchema: shareStorySchema,
        enableReinitialize: true,
    });

    const onSubmitSuccess = (response) => {
        _logger('onSubmitSuccess', response);
        Swal.fire({
            icon: 'success',
            text: 'Your story was Updated!',
            confirmButtonText: 'Great!',
        });
        navigate(`/sharestory`);
    };

    const onSubmitError = (err) => {
        _logger('onSubmitError', err);
        toastr.error('Error your story was not Updated');
    };

    const getAwsResponse = (files) => {
        const fileResponse = files.data.items[0];
        const fileName = shortenUrl(fileResponse.url);
        setImageFiles((prevState) => {
            const f = { ...prevState };
            f.Id = fileResponse.id;
            f.Url = fileResponse.url;
            f.Name = fileName;
            return f;
        });
        formik.setFieldValue('fileId', [fileResponse.id]);
    };
    const shortenUrl = (url) => {
        const nameStart = url.indexOf('_');
        const fileName = url.slice(nameStart + 1);
        return fileName;
    };
    useEffect(() => {
        if (state?.type === 'STORY_UPDATE') {
            _logger('state.payload', state.payload);

            setFormData((prevState) => {
                let data = { ...prevState };
                data.name = state.payload.name;
                data.email = state.payload.email;
                data.story = state.payload.story;

                return data;
            });
            setImageFiles((prevState) => {
                let data = { ...prevState };
                data.Url = state.payload.files[0].url;
                data.Id = state.payload.files.id;
                return data;
            });
        }
    }, [state]);
    return (
        <React.Fragment>
            <div className="row mb-5 share-story">
                <div className="col-6">
                    <Card className="shadow p-3 mb-2 bg-body rounded marginAll story-card-size h-80">
                        <Stack className="p-2">
                            <Card.Title className="text-center">
                                <h3>
                                    <span className="text-primary"> Edit Share Story</span>
                                </h3>
                            </Card.Title>
                            <FormikProvider value={formik}>
                                <Form>
                                    <div className="form-group">
                                        <label htmlFor="name">Name</label>
                                        <Field type="text" name="name" className="form-control" placeholder="Name" />
                                        <ErrorMessage name="name" component="div" className="has-error" />
                                    </div>
                                    <div className="form-group">
                                        <label htmlFor="email">Email</label>
                                        <Field type="email" name="email" className="form-control" placeholder="Email" />
                                        <ErrorMessage name="email" component="div" className="has-error" />
                                    </div>
                                    <div className="form-group">
                                        <label htmlFor="story">Story</label>
                                        <Field
                                            component="textarea"
                                            name="story"
                                            className="form-control"
                                            placeholder="Your Story"
                                        />
                                        <ErrorMessage name="story" component="div" className="has-error" />
                                    </div>
                                    <br />
                                    <div className="form-group ">
                                        <label htmlFor="fileId" className="mb-1">
                                            Upload a file Below
                                        </label>

                                        <FileUploader
                                            getAwsResponse={(files) => getAwsResponse(files)}
                                            isMultipleFiles={false}
                                            name="fileId"
                                            className="form-control"></FileUploader>
                                        <ErrorMessage name="fileId" component="div" className="has-error" />
                                        <p>File Uploaded: {imageFiles.Id === 0 ? 'None' : imageFiles.Name} </p>
                                    </div>
                                    <br />
                                    <Button className="btn btn-primary" type="submit">
                                        Update
                                    </Button>
                                </Form>
                            </FormikProvider>
                        </Stack>
                    </Card>
                </div>
                <div className="col-6">
                    <StoryPreview info={formik.values} imgPreview={imageFiles.Url} />
                </div>
            </div>
        </React.Fragment>
    );
}

export default ShareStoryFormEdit;
